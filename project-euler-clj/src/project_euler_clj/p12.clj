(ns project-euler-clj.p12
  (:use clojure.test))

;; The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

;; Let us list the factors of the first seven triangle numbers:

;;      1: 1
;;      3: 1,3
;;      6: 1,2,3,6
;;     10: 1,2,5,10
;;     15: 1,3,5,15
;;     21: 1,3,7,21
;;     28: 1,2,4,7,14,28

;; We can see that 28 is the first triangle number to have over five divisors.

;; What is the value of the first triangle number to have over five hundred divisors?

(def whole-numbers (iterate inc 1))

(defn triangle-number [n]
  (reduce + (take n whole-numbers)))

(deftest test-tirangle-number
  (is (= (triangle-number 1) 1))
  (is (= (triangle-number 2) 3))
  (is (= (triangle-number 3) 6))
  (is (= (triangle-number 7) 28)))

(defn divide? [a b]
  (= (mod a b) 0))

(defn find-divisors [n]
  (loop [s 1
         ret []]
    (cond
     (> (* s s) n) ret
;;     (> s (/ n 2)) (conj ret n)
     (divide? n s) (recur (inc s) (conj (conj ret s) (/ n s)))
     :else (recur (inc s) ret))))

(deftest test-find-divisors
  (is (= (set (find-divisors 1)) (set [1])))
  (is (= (set (find-divisors 3)) (set [1 3])))
  (is (= (set (find-divisors 6)) (set [1 2 3 6])))
  (is (= (set (find-divisors 10)) (set [1 2 5 10])))
  (is (= (set (find-divisors 15)) (set [1 3 5 15])))
  (is (= (set (find-divisors 21)) (set [1 3 7 21])))
  (is (= (set (find-divisors 28)) (set [1 2 4 7 14 28]))))

(def triangle-numbers
  (map triangle-number whole-numbers))

(deftest test-triangle-numbers
  (is (= (take 1 triangle-numbers) [1]))
  (is (= (take 2 triangle-numbers) [1 3]))
  (is (= (take 7 triangle-numbers) [1 3 6 10 15 21 28])))

(defn p12 []
  (first (filter #(> (count (find-divisors %)) 500) triangle-numbers)))
